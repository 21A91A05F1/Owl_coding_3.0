Toposort in Bfs(khan's algorithm)
  (u,v) ---> u appears before v in the linear ordering.
  Linear ordering of edges
  It is only valid for directed acyclic graph.
Indegree: Number of incoming edges for a vertex.
If there is no indegree for any vertex , then it means that the 
particular edge is independent of nayother edge , so we can place them
at the beginning.
Step 1: Insert all the nodes with indegree 0.
Step 2: Take them out of the queue and reduce the indegree of
        adjacent nodes.

Code:
// calculated the indegree.
 int indegree[v]={0};
	    for(int i=0;i<v;i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
// if the indegree is zero , then push the node to queue.
	    queue<int>q;
	    for(int i=0;i<v;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int>ve;
//as above mentioned , traverse throught the queue and reduce the indegree and if anywhere the indegree gets zero , then we can add it our
resultant vector.
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        
	        ve.push_back(node);
	        //node is in toposort , so remove it from indegree 
	        // since we are reducing the indegree of adjacent elements to the elements in queue.
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0) q.push(it);
	        }
	    }
	    return ve;
==========================================================================================================================================
Toposort in dfs:
Linear ordering of vertices such that if there is an edge
between u and v , u appears before v in the ordering.

We will be using a stack and visied array.
this is similar to cycle detection that u have done using
parent node and current node , in this we will be considering a 
stack inorder to store the order of the toposort.

Code:
void dfs(int Node,vector<int>&vis,stack<int>&st,vector<int> adj[] )
	{
	    
        vis[0]=1;
        for(auto it:adj[Node])
        {
            if(vis[it]==0)
            {
                vis[it]=1;
                dfs(it,vis,st,adj);
                
            }
        }
        st.push(Node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    //
	    vector<int>vis(V,0);
	    stack<int>st;
	    vector<int>res;
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	        {
	            dfs(0,vis,st,adj);
	        }
	    }
	    while(!st.empty())
	    {
	        res.push_back(st.top());
	        st.pop();
	    }
	    return res;
================================================================
Course scheduling 1.
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that
you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Approach:
If there is a cyclic dependency then we return false , it indicates that for given prerequisites
list , if there forms a cycle then it indicates they are dependent tasks then we return false.
and viceversa happens !!!

We should express the given graphs as directed graphs.

Step1: Firstly find the adjacentlist for given list of prerequisites
Step2: Then follow the same process , that you have followed in toposort.
Step3: If the size of the toposort order formed is equal to the number of tasks present , then 
       We can return true , else it would be false.

Code:
vector<int>adj[v];
	    for(auto it:prerequisites)
	    {
	        adj[it.first].push_back(it.second);
	    }
	    
	     int indegree[v]={0};
	    for(int i=0;i<v;i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<v;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int>ve;

	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        
	        ve.push_back(node);
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0) q.push(it);
	        }
	    }
	    if(ve.size()==v) return true;
	    return false;
=======================================================================================
Course Schedule 2:
we should return the toposort order.

There are a total of n tasks you have to pick, labelled from 0 to n-1.
Some tasks may have prerequisite tasks, for example to pick task 0 you have to first finish tasks 1
, which is expressed as a pair: [0, 1]
Given the total number of n tasks and a list of prerequisite pairs of size m.
Find a ordering of tasks you should pick to finish all tasks.
Note: There may be multiple correct orders, you just need to return any one of them. 
If it is impossible to finish all tasks, return an empty array. 
Driver code will print "No Ordering Possible", on returning an empty array.
Returning any correct order will give the output as 1, 
whereas any invalid order will give the output 0.

Code:
vector<int>adj[v];
	    for(auto it:prerequisites)
	    {
	        adj[it[1]].push_back(it[0]);
	    }
	    
	     int indegree[v]={0};
	    for(int i=0;i<v;i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<v;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int>ve;

	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        
	        ve.push_back(node);
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0) q.push(it);
	        }
	    }
	    if(ve.size()==v) return ve;
	    return {};









